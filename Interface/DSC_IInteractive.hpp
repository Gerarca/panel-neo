//---------------------------------------------------------------------------
//
//	DSC_IInteractive.hpp
//	Copyright 2017 Johnson Controls. All rights reserved.
//
//	The main InteractiveSDK class type.
//
//---------------------------------------------------------------------------

//the "#pragma once" directive (if supported by a compiler) should prevent name clashes
#pragma once

#include "DSC_IComponent.hpp"
#include "DSC_ProtocolTypes.hpp"
#include "DSC_CipherTypes.hpp"
#include "DSC_ILicenseManager.hpp"
#include "DSC_IBlockCipher.hpp"
#include "DSC_IChannel.hpp"
#include "DSC_ISecurityBase.hpp"
#include "DSC_IAccessCredentials.hpp"
#include "DSC_IDiagnostics.hpp"

using namespace SDK_MAJOR_NAMESPACE::SDK_MINOR_NAMESPACE::SECURITY_NAMESPACE;

#ifndef _DSC_I_INTERACTIVE_HPP_
#define _DSC_I_INTERACTIVE_HPP_

#ifdef __cplusplus
extern "C" {
#endif	//__cplusplus

//---------------------------------------------------------------------------
namespace SDK_MAJOR_NAMESPACE {
namespace SDK_MINOR_NAMESPACE {
//---------------------------------------------------------------------------

#define NAME_DSC_IInteractive	"DSC_IInteractive"

//---------------------------------------------------------------------------

#ifndef DSC_IInteractive_FWD_DEFINED
#define DSC_IInteractive_FWD_DEFINED
typedef DSC_INTERFACE DSC_IInteractive DSC_IInteractive;
#endif

//---------------------------------------------------------------------------

#if defined(__cplusplus) && !defined(C_STYLE_INTERFACE)

/*!
	This is the main interface of the Interactive SDK. It is the entry
	point for the SDK. This interface is used for creating instances of
	all top-level SDK objects.
*/
DSC_INTERFACE DSC_IInteractive : public DSC_IComponent
{
public:

	//! This property is used to obtain the SDK product information.
    /*!	
		example text: "TSP DSC InteractiveSDK, Copyright 2017-2020 Johnson Controls. All rights reserved."

		\sa DSC_ITextString
     	\param ptrTextString Pointer to DSC_ITextString member.
    */
	virtual IRESULT ICALL get_ProductInfo(OUT DSC_ITextString** ptrTextString) const = 0;

	//! This property is used to obtain the SDK software version information.
    /*!	
		exmaple text: "Version 2.0"

		\sa DSC_ITextString
     	\param ptrTextString Pointer to DSC_ITextString member.
    */
	virtual IRESULT ICALL get_VersionInfo(OUT DSC_ITextString** ptrTextString) const = 0;

	//! This property is used to get the SDK's license manager interface.
    /*! 
		The SDK uses an internal license manager for enabling various features.
		License keys are generated by the Connected Partner Portal program.

		\sa DSC_ILicenseManager
     	\param ptrManager Pointer to DSC_ILicenseManager interface that is used to preset the license data.
    */
	virtual IRESULT ICALL get_LicenseManager(OUT DSC_ILicenseManager** ptrManager) = 0;

	//! Create protocol specific cipher
    /*! 
		This function creates a default block cipher for use with the internal software encryption of the SDK.

		\sa enum DSC_CipherType_Tag
		\sa DSC_IBlockCipher
		\param flgCipher Pointer to DSC_CipherType value.
     	\param ptrCipher Pointer to DSC_IBlockCipher created.
    */
	virtual IRESULT ICALL CreateBlockCipher(IN DSC_CipherType flgCipher, OUT DSC_IBlockCipher** ptrCipher) = 0;

	//! Used to create a protocol specific communication channel
    /*! 
		This will create a communication channel within the SDK for sending/receiving
		data via the SecurityBase object.

		\sa DSC_ISecurityBase
		\sa enum DSC_ProtocolType_Tag
		\sa DSC_IChannel
		\param flgProtocol Pointer to DSC_Protocol value.
     	\param ptrChannel Pointer to DSC_IChannel created.
    */
	virtual IRESULT ICALL CreateChannel(IN DSC_ProtocolType flgProtocol, OUT DSC_IChannel** ptrChannel) = 0;

	//! Used to create a new, protocol specific security base object
    /*! 
		The SecurityBase object is the representation of the panel with which the SDK 
		will communicate. A single SecurityBase object should be created/used by 3rd party integrators
		per panel they wish to interact with.

		\sa enum DSC_ProtocolType_Tag
		\sa DSC_ISecurityBase
		\param flgProtocol Pointer to DSC_Protocol value.
     	\param ptrSecurityBase Pointer to DSC_ISecurityBase created.
    */
	virtual IRESULT ICALL CreateSecurityBase(IN DSC_ProtocolType flgProtocol, OUT DSC_ISecurityBase** ptrSecurityBase) = 0;

	//! Used to create a new access credentials object
    /*! 
		The access credentials interface is used for storing various user credentials.
		For example: Panel Installer Code

		\sa enum DSC_AccessCredentialsType_Tag
		\sa DSC_IAccessCredentials
		\param flgCredentials Pointer to DSC_AccessCredentialsType value specifying the type of credentials.
     	\param ptrCredentials Pointer to DSC_IAccessCredentials created.
    */
	virtual IRESULT ICALL CreateAccessCredentials(IN DSC_AccessCredentialsType flgCredentials, OUT DSC_IAccessCredentials** ptrCredentials) = 0;

	//! Used to create a new diagnostics object
    /*! 
		The diagnostics interface is used for obtaining various types of information 
		helpful in diagnosing issues related to the usage of the SDK.
		eg. Memory Usage

		\sa DSC_IDiagnostics
     	\param ptrDiagnostics Pointer to storage for the DSC_IDiagnostics interface.
    */
	virtual IRESULT ICALL CreateDiagnostics(OUT DSC_IDiagnostics** ptrDiagnostics) = 0;
};

#else

typedef struct DSC_IInteractive_Vtbl
{
	BEGIN_INTERFACE

	IRESULT (ICALL *Query)(IN DSC_IInteractive *This, IN char const* pszInterface, OUT VOID** ptrInterface);
	IRESULT (ICALL *Acquire)(IN DSC_IInteractive *This, OUT ICOUNT* ptrCount);
	IRESULT (ICALL *Release)(IN DSC_IInteractive *This, OUT ICOUNT* ptrCount);

	IRESULT (ICALL *get_ProductInfo)(IN DSC_IInteractive *This, OUT DSC_ITextString** ptrTextString); 
	IRESULT (ICALL *get_VersionInfo)(IN DSC_IInteractive *This, OUT DSC_ITextString** ptrTextString); 
	IRESULT (ICALL *get_LicenseManager)(IN DSC_IInteractive *This, OUT DSC_ILicenseManager** ptrManager);
	IRESULT (ICALL *CreateBlockCipher)(IN DSC_IInteractive *This, IN DSC_CipherType flgCipher, OUT DSC_IBlockCipher** ptrCipher);
	IRESULT (ICALL *CreateChannel)(IN DSC_IInteractive *This, IN DSC_ProtocolType flgProtocol, OUT DSC_IChannel** ptrChannel);
	IRESULT (ICALL *CreateSecurityBase)(IN DSC_IInteractive *This, IN DSC_ProtocolType flgProtocol, OUT DSC_ISecurityBase** ptrSecurityBase);
	IRESULT (ICALL *CreateAccessCredentials)(IN DSC_IInteractive *This, IN DSC_AccessCredentialsType flgCredentials, OUT DSC_IAccessCredentials** ptrCredentials); 
	IRESULT (ICALL *CreateDiagnostics)(IN DSC_IInteractive *This, OUT DSC_IDiagnostics** ptrDiagnostics);

	END_INTERFACE
} DSC_IInteractive_Vtbl;

DSC_INTERFACE DSC_IInteractive
{
	//the assumption: the compiler places pointer to VTABLE first in the class layout
 	struct DSC_IInteractive_Vtbl *ptrVtbl;
};

#endif

//---------------------------------------------------------------------------
} //SDK_MINOR_NAMESPACE
} //SDK_MAJOR_NAMESPACE
//---------------------------------------------------------------------------

#ifdef __cplusplus
}
#endif	//__cplusplus

#endif	//_DSC_I_INTERACTIVE_HPP_
